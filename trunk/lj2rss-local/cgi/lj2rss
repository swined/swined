#!/usr/bin/perl

use warnings;
use strict;
use lib '/usr/share/lj2rss/lib';
use youtube;
use CGI qw/param/;
use XML::Writer;
use LWP::UserAgent;
use Cache::Memcached;
use Cache::FastMmap;
use ua;
use Data::Dumper;

my $ua = new ua;
ua::set_socks(9050);
my ($ll, $hp) = (param('login') || '', param('hash') || '');
my ($ep, $cm, $cf)= (0, 0, 0);

status();

sub status {
    $0 = sprintf '[lj2rss] u=%s, t=%s, ep=%s, cm=%s, cf=%s %s', $ll, time - $^T, $ep, $cm, $cf, shift;
    return;
}

my $cache = new Cache::FastMmap(
    share_file => '/var/cache/lj2rss/cache',
    expire_time => '7d',
    cache_size => '1024m',
    unlink_on_exit => 0,
    read_cb => \&fetch_entry,
);

sub fetch_entry {
	my (undef, $url) = @_;
	$cm++;
	status 'read_cb()';
	my $r = eval {
	    local $SIG{ALRM} = sub { die "alarm\n" };
	    alarm 10;
	    my $w = $ua->get($url . '?format=light')->content;
	    die if $w !~ /<blockquote>/s;
	    my $t = $1 if $w =~ /<title>(.*?)<\/title>/s;
	    local $_ = $w, s/^.*?<body >//s, s/<\/body>.*?$//s, 
		s/^(.*?)<hr \/>.*?<hr \/>/$1/s, s/<br style='clear: both' \/>.*?$//s;
	    return { subject => $t, content => $_ };
	};
	my $e = $@;
	alarm 0;
	status;
	if ($e) {
	    $cf++;
	    return;
	}  else {
	    return $r;
	}
}

sub login {
    my $post = $ua->post(
	'http://www.livejournal.com/interface/flat', 
	[
	    mode => 'sessiongenerate',
	    user => $ll,
	    hpassword => $hp,
	    expiration => 'short',
	],
    );
    return 'api: ' . $post->status_line unless $post->is_success;
    my $s = { split /\n/, $post->content }->{ljsession};
    return sprintf 'no session<br><br>', $post->{content} unless $s;
    my $l = $s =~ /^.+?:(.+?:.+?):/ ? $1 : return sprintf 'bad session: %s', $s;
    $ua->cookie_jar->set_cookie(0, 'ljsession', $s, '/', '.livejournal.com');
    $ua->cookie_jar->set_cookie(0, 'ljloggedin', $l, '/', '.livejournal.com');
    return;
}

sub links {
    status 'links()';
    my $rs = $ua->get('http://www.livejournal.com/mobile/friends.bml?skip=' . param('skip'));
    my @r = grep s/.*: <a href='(.*?)\?.*?'>.*/$1/, split '<b', $rs->content;
    die $rs->content unless @r;
    status;
    return @r;
}

sub getJName {
    map { return $1 if $_[0] =~ $_ } 
	('^http://(.*?)\.livejournal\.com/[0-9]*\.html',
	'^http://users\.livejournal\.com/(.*?)/[0-9]*\.html',
	'^http://community\.livejournal\.com/(.*?)/[0-9]*\.html');
    return undef;
}

sub addEntry {
    my ($xml, $lnk, $ttl, $dsc, $dtm) = @_;
    $xml->startTag('item');
    $xml->dataElement('guid', $lnk, isPermaLink => 'true');
    $xml->dataElement('link', $lnk);
    $xml->dataElement('title', $ttl);
    $xml->dataElement('description', $dsc);
    $xml->endTag;
}

print "content-type: text/xml; charset=utf-8\n\n";

my $xml = new XML::Writer(OUTPUT => *STDOUT);
$xml->startTag('rss', version => '2.0');
$xml->startTag('channel');
$xml->dataElement($_, "${ll}'s friends") for ('title', 'description');
$xml->dataElement('link', "http://www.livejournal.com/~$ll/friends");
if (my $e = login) {
    addEntry($xml, "http://$ENV{HTTP_HOST}/?rand=" . rand, 'error', 
	sprintf 'Could not log into your LJ account:<br>%s<br><br><a href="http://swined.livejournal.com/391329.html">http://swined.livejournal.com/391329.html</a>', $e);
} else {
	eval {
		foreach (links) {
			$ep++;
			$xml->dataElement('debug', '', 'link' => $_);
#			my $et = eval {
#				local $SIG{ALRM} = sub { die "alarm\n" };
#				alarm 10; 
#				status 'cache->get()';
#				$cache->get($_);
#			};
#			my $e = $@;
#			alarm 0;
#			next if $e;
			my $et = fetch_entry(undef, $_) || next;
			my $jn = getJName($_);
			m|/(\d+)\.html$|;
			my $id = $1;
			if ($jn && $id) {
				my $u = "http://lj2rss.swined.net/comments.png?user=${jn}&itemid=${id}";
				$et->{content} .= "<br><a href='${_}'><img src='${u}'></a>";
			}
			$jn |= '***';
			$et->{content} = youtube::replace($et->{content});
			addEntry($xml, $_, ($et->{subject} or $jn . ': untitled'), $et->{content});
			status();
		}
	};
	if (my $e = $@) {
		addEntry($xml, $e);
	}
}
$xml->endTag;
$xml->endTag;
$xml->end;
